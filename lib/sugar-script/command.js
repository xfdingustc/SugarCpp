// Generated by CoffeeScript 1.12.4
(function() {
  var BANNER, SWITCHES, SugarScript, compileScript, exec, fs, optparse, opts, parseOptions, path, ref, spawn;

  fs = require('fs');

  path = require('path');

  optparse = require('./optparse');

  SugarScript = require("./sugar-script");

  ref = require('child_process'), spawn = ref.spawn, exec = ref.exec;

  BANNER = 'Usage: sugar [options] path/to/script.scp -- [args]';

  SWITCHES = [['-c', '--compile', 'compile to C++ and save as .cpp files'], ['-o', '--output [DIR]', 'set the output directly to the "node" binary']];

  opts = {};

  exports.run = function() {
    printLine('Fuck!!!');
    parseOptions();
    if (opts["eval"]) {
      return compileScript(null, opts["arguments"][0]);
    }
  };

  compileScript = function(file, input, base) {
    var compiled, err, message, o, options, t, task;
    if (base == null) {
      base = null;
    }
    o = opts;
    options = compileOptions(file, base);
    try {
      t = task = {
        file: file,
        input: input,
        options: options
      };
      SugarScript.emit('compile', task);
      if (o.tokens) {
        return printTokens(SugarScript.tokens(t.input, t.options));
      } else if (o.nodes) {
        return printLine(SugarScript.nodes(t.input, t.options).toString().trim());
      } else if (o.run) {
        return SugarScript.register();
      } else if (o.join && t.file(isnot(o.join))) {
        return compileJoin();
      } else {
        compiled = SugarScript.compile(t.input, t.options);
        t.output = compiled;
        if (o.map) {
          t.output = compiled.cpp;
          t.sourceMap = compiled.v3SourceMap;
        }
        SugarScript.emit('success', task);
        if (o.print) {
          return printLine(t.output.trim());
        } else if (o.compile || o.map) {
          return writeCpp(base, t.file, t.output, options.cppPath, t.sourceMap);
        }
      }
    } catch (error) {
      err = error;
      SugarScript.emit('failure', err, task);
      if (SugarScript.listeners('failure').length) {
        return;
      }
      message = (err != null ? err.stack : void 0) || ("" + err);
      if (o.watch) {
        return printLine(message + '\x07');
      } else {
        printWarn(message);
        return process.exit(1);
      }
    }
  };

  parseOptions = function() {
    var o, optionParser;
    optionParser = new optparse.OptionParser(SWITCHES, BANNER);
    o = opts = optionParser.parse(process.argv.slice(2));
    o.compile || (o.compile = !!o.output);
    o.run = !(o.compile || o.print || o.map);
    return o.print = !!(o.print || (o["eval"] || o.stdio && o.compile));
  };

}).call(this);
